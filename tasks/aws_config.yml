#aws iam create-user --user-name rec-s3-user
#aws iam create-group --group-name REC_Security_Group
#export POLICYARN=$(aws iam list-policies --query 'Policies[?PolicyName==`AmazonS3FullAccess`].{ARN:Arn}' --output text)
#aws iam attach-group-policy  --group-name {{ aws_staging_group } --policy-arn $POLICYARN
#aws s3 mb s3://bucket-name
#aws s3api put-public-access-block \
#    --bucket my-bucket \
#    --public-access-block-configuration "BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true"

- name: Create AWS S3 staging bucket
  shell: "aws s3 mb s3://{{ aws_staging_bucket }}"

- name: Create IAM Security Group
  shell: "aws iam create-group --group-name {{ aws_staging_group }}"

- template:
    src: "../templates/s3_policy.json.j2"
    dest: "./output/{{ aws_staging_bucket }}_policy.json"

- name: Create a Policy for staing bucket
  shell: "aws iam create-policy --policy-name {{ aws_staging_bucket }}-policy --policy-document file://./output/{{ aws_staging_bucket }}_policy.json"

- name: Grant {{ aws_staging_bucket }}-policy to {{ aws_staging_group }}
  shell: "{{ lookup('template', '../files/grant_s3.sh.j2') }}"
  args:
    executable: /bin/bash
  register: large_script_result

- name: Create AWS Staging User
  shell: "aws iam create-user --user-name {{ aws_staging_user }}"

- name: Create Access Key for User
  shell: "aws iam create-access-key --user-name {{ aws_staging_user }} --output yaml > ./output/{{ aws_staging_user }}-access.yml"

- name: Attach staging user to staging group
  shell: "aws iam add-user-to-group --user-name {{ aws_staging_user }} --group-name {{ aws_staging_group }}"